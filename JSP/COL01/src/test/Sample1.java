package test;

import java.util.*; //컬렉션은 여기 들어있음

public class Sample1 {
	public static void main(String[] args) {
		//자바 컬렉션 : 자료를 이용하기 위해 구현된 일종의 프레임워크
		//사용방업이 "딱" 정해져 있음
		//*********매우 중요
		//컬렉션의 기본형은 interface 이므로 객체로 생성해서 사용할 수 없다
		//미리 implements가 되어있는 class들이 존재함, 이 class들을 객체로 생성해서 기능을 구현
		
		//List : 순서가 엄격히 존재, 데이터 중복 가능 (순번이 구별의 기준이 됨), 속도가 빠름, 사용자가 입력한 순서가 변동되지 않는다.
		//		(개발자가 지정한 순번이 엄격하게 지켜진다.)
			// Vector(배열 - 자동으로 10칸씩 증가), Stack(LIFO-후입선출),
			// LinkedList: 데이터간에 link가 걸려있어서 데이터 앞뒤에 검색 속도가 빠름, 첫번째 값과 마지막 값을 찾는데 특화되어있음
			//*** ArrayList (2칸을 최초에 만들고, 데이터가 들어올때마다 1칸씩 증가)
			// 등
		//Set : 순서가 없음, 데이터 중복 불가., 속도가 느림, 마구잡이로 데이터를 저장
			//**** HashSet : -Hash고속이다(데이터의 용량에 따라서-검색이 빠른순서로 재정렬을 시키고 용량이 적은것부터 읽음, 참조순서(횟수)도 바꿈)
			// SortedSet : 값을 기준으로 정렬 처리를 함, 임의로 정렬의 방식을 지정하기 쉽지 않음
			// TreeSet : SortedSet가 원형으로 데이터를 저장할때 나무형태로 저장한다는 뜻, 인공지능에서 사용하고 있어서 요즘 각광받음
			// 등
		//Map : {key:values} 쌍으로 된 데이터, key는 중복불가, value는 중복가능 -> 개발자가 많이 사용, 개발속도가 많이 느림
		//		속도가 제일 느림!!
			//**** HashMap - 검색할때 속도가 가장 빨라서 많이 사용함
			// SortedMap - 키값, value 값 의 정렬 기준을 사용할 수 있음
			// TreeMap - 속도가 느려서 많이 사용하지 않음
			// 등
		
		//List L=new List(); 
		//리스트트 인터페이스로 생성자가 없음
		List L = new ArrayList();
		
	}
}
