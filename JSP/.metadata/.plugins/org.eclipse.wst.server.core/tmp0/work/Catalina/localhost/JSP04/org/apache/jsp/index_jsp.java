/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2023-10-26 02:29:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>표현방법</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		");

			//스크립트릿 : 내부에서는 java언어를 사용할 수 있다. html, 자바스크립언어 안됨
			//<h1>오류</h1>
			//prompt();
			//alert();
			String c="<h1 style='color:orange;'>외부표현</h1>";
			out.print(c);
			String b = "blue";
			//디자인 우선순위(높은것 부터)
			//1. 사용자 디자인(블루라이트 필터, 나이트모드, 화면밝기, 썬글라스 등)
			//2. 개발자 디자인(개발자가 직접 적어놓은 디자인)
			//	2-1. 인라인디자인(태그에 직접 style 스타일을 적은 경우)
			//	2-2. 내,외부 style sheet 혹은 style 태그 이용한 디자인(link rel='stylesheet')
			//		2-2-1. 아이디선택자 디자인(#id))
			//		2-2-2. 클래스선택자 디자인(.class)
			//		2-2-3. 태그선택자 디자인(h1)
			//		2-2-4. 전체선택자 디자인(*)
			//3. 기본 디자인 태그 스타일(적지 않아도 기본적으로 있는 디자인)
			//4.  
		
      out.write("\r\n");
      out.write("		");
      out.print(c );
      out.write(" <!-- 해당 변수를 출력 == out.print와 같은 뜻 -->\r\n");
      out.write("		<h1 style=\"color:");
      out.print(b );
      out.write("; text-align:center;\">외부표현</h1>\r\n");
      out.write("		");

			String[] colorArr = new String[7];
			colorArr[0] = "red";
			colorArr[1] = "orange";
			colorArr[2] = "yellow";
			colorArr[3] = "green";
			colorArr[4] = "blue";
			colorArr[5] = "navy";
			colorArr[6] = "purple";
			//System.out.println(colorArr[4]);
			int cnt=0;
			int j = colorArr.length;
			for(int i = 0; i<100; i++) {
				out.print("<h1 style='color:"+colorArr[i % j]+";''> 다음색상을 표현 : " +colorArr[i % j]+" </h1>");
				cnt++;
			}
			System.out.println(cnt);
			
		
      out.write("\r\n");
      out.write("		");

		// 동일한 방법
			for(int i = 0; i<10; i++) {
				
		
      out.write("\r\n");
      out.write("				<h1 style='color:");
      out.print(colorArr[i % j] );
      out.write(";'>다음색상을 표현</h1>\r\n");
      out.write("		");

				cnt++;
				}
				System.out.println(cnt);
		 		
      out.write("\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
